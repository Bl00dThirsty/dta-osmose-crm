generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/*model AuditLog {
  id         Int      @id @default(autoincrement())
  userId     Int
  action     String
  entityId   Int?
  entityType String?
  timestamp  DateTime @default(now())
  details    String?
  user       user     @relation(fields: [userId], references: [id])
}*/

model Reporting {
  id                Int      @id @default(autoincrement())
  prospectName      String
  date              DateTime
  degree            String?
  rdvObject         String
  nextRdv           DateTime
  time              String
  contact           String
  pharmacoVigilance String
  latitude          Float
  longitude         Float
  filePath          String?
  createdAt         DateTime @default(now())
}



model announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  status      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
}





/*model attendance {
  id            Int       @id @default(autoincrement())
  userId        Int
  inTime        DateTime
  outTime       DateTime?
  ip            String?
  comment       String?
  punchBy       Int?
  totalHour     Float?
  inTimeStatus  String?
  outTimeStatus String?
  status        Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime
  user          user      @relation(fields: [userId], references: [id])
}*/

/*model award {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  description  String?
  image        String?
  status       Boolean        @default(true)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  awardHistory awardHistory[]
}*/

/*model awardHistory {
  id          Int      @id @default(autoincrement())
  userId      Int
  awardId     Int
  awardedDate DateTime
  comment     String?
  status      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  award       award    @relation(fields: [awardId], references: [id])
  user        user     @relation(fields: [userId], references: [id])
}*/

model claim {
  id              String      @id @default(uuid())
  invoiceId       String
  productId       String
  quantity        Int
  unitPrice       Float
  totalAmount     Float
  reason          String
  description     String?
  response        claimResponse?
  //userCreatorId   Int? // ID de l'utilisateur créateur
  //customerCreatorId  Int? // ID du client créateur
  createdAt       DateTime    @default(now())
  institutionId   String
  institution     institution @relation(fields: [institutionId], references: [id])
  //customer        customer    @relation(fields: [customerCreatorId], references: [id])
  //user            user        @relation(fields: [userCreatorId], references: [id])
  invoice         saleInvoice @relation(fields: [invoiceId], references: [id])
  product         product     @relation(fields: [productId], references: [id])

  customer customer[]

  user user[]
}

model claimResponse {
  id              String      @id @default(uuid())
  claimId         String      @unique
  status          String      @default("PENDING") // ACCEPTED, REJECTED, PENDING
  description     String?
  createdAt       DateTime    @default(now())
  claim           claim       @relation(fields: [claimId], references: [id])
}

model credit {
  id              String      @id @default(uuid())
  customerId      Int
  amount          Float
  usedAmount      Float       @default(0)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  customer        customer    @relation(fields: [customerId], references: [id])

}


model customer {
  id              Int         @id @default(autoincrement())
  customId        String          @unique
  name            String
  phone           String        @unique
  email           String        @unique
  ville           String?
  nameresponsable String?
  quarter         String?
  region          String?
  role            String         @default("Particulier")
  status          Boolean?       @default(true)
  type_customer   String?         @default("Pharmacie")
  website         String?
  created_at      DateTime      @default(now())
  updated_at      DateTime?      @updatedAt
  saleInvoice     saleInvoice[]
  credits         credit[]
  claims    claim[]

  
}

/*model CustomerCounter {
  id     Int  @id @default(autoincrement())
  institution     String
  month  Int
  year   Int
  count  Int  @default(0)

  @@unique([institution, month, year])
}*/

model department {
  id     Int     @id @default(autoincrement())
  name   String
  status Boolean @default(true)
  user   user[]
}

model designation {
  id                 Int                  @id @default(autoincrement())
  name               String               
  status             Boolean              @default(true)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  user               user[]
}

/*model designationHistory {
  id            Int         @id @default(autoincrement())
  userId        Int
  designationId Int
  startDate     DateTime
  endDate       DateTime?
  comment       String?
  designation   designation @relation(fields: [designationId], references: [id])
  user          user        @relation(fields: [userId], references: [id])
}*/

model institution {
  id        String    @id @default(uuid())
  name      String
  slug      String    @unique
  products  product[]
  saleInvoice  saleInvoice[]
  appSetting   appSetting[]
  claims    claim[]
}

model product {
  id                           String         @id @default(uuid())
  EANCode                      String         @unique
  brand                        String
  designation                  String
  quantity                     Int
  restockingThreshold          Int
  sellingPriceTTC              Float
  purchase_price               Float
  warehouse                    String
  created_at                   DateTime       @default(now())
  updated_at                   DateTime       @default(now())
  institutionId                String
  institution                  institution    @relation(fields: [institutionId], references: [id])
  imageName                    String?
  idSupplier                   Int?
  product_category_id          Int?
  unit_measurement             Float?
  unit_type                    String?
  sku                          String?        @unique
  reorder_quantity             Int?
  saleItem                     saleItem[]
  claims                       claim[]
}

model ProductCounter {
  id     Int  @id @default(autoincrement())
  institution     String
  month  Int
  year   Int
  count  Int  @default(0)

  @@unique([institution, month, year])
}

//vente given_amount       Float?
 // amount_refunded    Float?
model saleInvoice {
  id              String      @id @default(uuid())
  invoiceNumber   String      @unique
  customerId      Int
  userId          Int
  institutionId   String
  totalAmount     Float
  discount        Float
  finalAmount     Float
  paidAmount      Float   @default(0) // Montant déjà payé
  dueAmount       Float   
  profit          Float   @default(0)
  paymentStatus   String      @default("PENDING") // PENDING, PAID, PARTIAL
  paymentMethod   String?     // CASH, CARD, TRANSFER
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  delivred        Boolean              @default(false)
  ready           Boolean              @default(false)
  customer        customer    @relation(fields: [customerId], references: [id])
  user            user        @relation(fields: [userId], references: [id])
  institution     institution @relation(fields: [institutionId], references: [id])
  items           saleItem[]
  claims          claim[]
}

model saleItem {
  id              String      @id @default(uuid())
  invoiceId       String
  productId       String
  quantity        Int
  unitPrice       Float
  totalPrice      Float

  invoice         saleInvoice @relation(fields: [invoiceId], references: [id])
  product         product     @relation(fields: [productId], references: [id])
}

model appSetting {
  id           Int    @id @default(autoincrement())
  company_name String
  tag_line     String
  address      String
  phone        String
  email        String
  website      String
  footer       String
  institutionId   String
  institution     institution    @relation(fields: [institutionId], references: [id])
}

/*
model product_category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime
  product   product[]
}
*/
/*
model publicHoliday {
  id        Int      @id @default(autoincrement())
  name      String
  date      DateTime
  status    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime
}

model purchaseInvoice {
  id                     Int                      @id @default(autoincrement())
  date                   DateTime
  total_amount           Float
  discount               Float
  paid_amount            Float
  due_amount             Float
  supplier_id            Int
  note                   String?
  supplier_memo_no       String?
  created_at             DateTime                 @default(now())
  updated_at             DateTime
  supplier               supplier                 @relation(fields: [supplier_id], references: [id], onDelete: Cascade)
  purchaseInvoiceProduct purchaseInvoiceProduct[]
  returnPurchaseInvoice  returnPurchaseInvoice[]
}

model purchaseInvoiceProduct {
  id                     Int             @id @default(autoincrement())
  product_id             Int
  invoice_id             Int
  product_quantity       Int
  product_purchase_price Float
  created_at             DateTime        @default(now())
  updated_at             DateTime
  purchaseInvoice        purchaseInvoice @relation(fields: [invoice_id], references: [id], onDelete: Cascade)
  product                product         @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

model returnPurchaseInvoice {
  id                           Int                            @id @default(autoincrement())
  date                         DateTime
  total_amount                 Float
  note                         String?
  purchaseInvoice_id           Int
  status                       Boolean                        @default(true)
  created_at                   DateTime                       @default(now())
  updated_at                   DateTime
  purchaseInvoice              purchaseInvoice                @relation(fields: [purchaseInvoice_id], references: [id], onDelete: Cascade)
  returnPurchaseInvoiceProduct returnPurchaseInvoiceProduct[]
}

model returnPurchaseInvoiceProduct {
  id                     Int                   @id @default(autoincrement())
  product_id             Int
  invoice_id             Int
  product_quantity       Int
  product_purchase_price Float
  created_at             DateTime              @default(now())
  updated_at             DateTime
  returnPurchaseInvoice  returnPurchaseInvoice @relation(fields: [invoice_id], references: [id], onDelete: Cascade)
  product                product               @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

*/
// VENTE DE PRODUITS
/*
model returnSaleInvoice {
  id                       Int                        @id @default(autoincrement())
  date                     DateTime
  total_amount             Float
  note                     String?
  saleInvoice_id           Int
  status                   Boolean                    @default(true)
  created_at               DateTime                   @default(now())
  updated_at               DateTime
  saleInvoice              saleInvoice                @relation(fields: [saleInvoice_id], references: [id], onDelete: Cascade)
  returnSaleInvoiceProduct returnSaleInvoiceProduct[]
}

model returnSaleInvoiceProduct {
  id                 Int               @id @default(autoincrement())
  product_id         Int
  invoice_id         Int
  product_quantity   Int
  product_sale_price Float
  created_at         DateTime          @default(now())
  updated_at         DateTime
  returnSaleInvoice  returnSaleInvoice @relation(fields: [invoice_id], references: [id], onDelete: Cascade)
  product            product           @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

model saleInvoice {
  id                 Int                  @id @default(autoincrement())
  date               DateTime
  total_amount       Float
  discount           Float
  paid_amount        Float
  due_amount         Float
  profit             Float
  customer_id        Int
  user_id            Int
  note               String?
  created_at         DateTime             @default(now())
  updated_at         DateTime
  returnSaleInvoice  returnSaleInvoice[]
  customer           customer             @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  user               user                 @relation(fields: [user_id], references: [id])
  saleInvoiceProduct saleInvoiceProduct[]
}

model saleInvoiceProduct {
  id                 Int         @id @default(autoincrement())
  product_id         Int
  invoice_id         Int
  product_quantity   Int
  product_sale_price Float
  created_at         DateTime    @default(now())
  updated_at         DateTime
  saleInvoice        saleInvoice @relation(fields: [invoice_id], references: [id], onDelete: Cascade)
  product            product     @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

model salePromise {
  id                 Int                  @id @default(autoincrement())
  date               DateTime
  dueDate            DateTime?
  reminderDate       DateTime?
  companyName        String?
  customer_address   String?
  total_amount       Float
  discount           Float
  customer_name      String
  customer_phone     String
  customer_id        Int?
  user_id            Int
  note               String?
  created_at         DateTime             @default(now())
  updated_at         DateTime
  user               user                 @relation(fields: [user_id], references: [id])
  salePromiseProduct salePromiseProduct[]
}

model salePromiseProduct {
  id                 Int         @id @default(autoincrement())
  product_id         Int
  promise_id         Int
  product_quantity   Int
  product_sale_price Float
  created_at         DateTime    @default(now())
  updated_at         DateTime
  product            product     @relation(fields: [product_id], references: [id], onDelete: Cascade)
  salePromise        salePromise @relation(fields: [promise_id], references: [id], onDelete: Cascade)
}
*/

model role {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  rolePermission rolePermission[]
  status         Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) 
}

model permission {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  rolePermission rolePermission[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now())
  
}

model rolePermission {
  id            Int        @id @default(autoincrement())
  role          role       @relation(fields: [role_id], references: [id], onDelete: Cascade)
  role_id       Int
  permission    permission @relation(fields: [permission_id], references: [id], onDelete: Cascade)
  permission_id Int
  status        Boolean    @default(true)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@unique([role_id, permission_id])
}

/*model salaryHistory {
  id        Int       @id @default(autoincrement())
  userId    Int
  salary    Float
  startDate String
  endDate   DateTime?
  comment   String?
  status    Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime
  user      user      @relation(fields: [userId], references: [id])
}

model supplier {
  id              Int               @id @default(autoincrement())
  name            String
  phone           String            @unique
  address         String
  status          Boolean           @default(true)
  created_at      DateTime          @default(now())
  updated_at      DateTime          @default(now())
  product         product[]
  purchaseInvoice purchaseInvoice[]
}
*/




model user {
  id                 Int                  @id @default(autoincrement())
  firstName          String?
  lastName           String?
  userName           String               @unique
  password           String
  email              String?              @unique
  phone              String?              @unique
  street             String?
  city               String?
  zipCode            String?
  gender            String?
  joinDate           DateTime?
  birthday           String?
  employeeId         String?              @unique
  CnpsId            String?   @unique
  bloodGroup         String?
  departmentId       Int?
  designationId      Int?
  role               String?
  salary             Float?
  emergencyPhone1    String?
  emergencyname1     String?
  emergencylink1     String?
  status             Boolean              @default(true)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @default(now())
  //AuditLog           AuditLog[]
  //attendance         attendance[]
  //awardHistory       awardHistory[]
  designation         designation?          @relation(fields: [designationId], references: [id])
  //salaryHistory      salaryHistory[]
  saleInvoice        saleInvoice[]
  //salePromise        salePromise[]
  department         department?          @relation(fields: [departmentId], references: [id])
  claims    claim[]
}


enum typCat {
  Pharmacie
  Distributeur
}