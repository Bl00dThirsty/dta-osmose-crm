generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AuditLog {
  id         Int      @id @default(autoincrement())
  userId     Int
  action     String
  entityId   Int?
  entityType String?
  timestamp  DateTime @default(now())
  details    String?
  user       user     @relation(fields: [userId], references: [id])
}

model Reporting {
  id                Int      @id @default(autoincrement())
  prospectName      String
  date              DateTime
  degree            String?
  rdvObject         String
  nextRdv           DateTime
  time              String
  contact           String
  pharmacoVigilance String
  latitude          Float
  longitude         Float
  filePath          String?
  createdAt         DateTime @default(now())
}

model announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  status      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
}

model appSetting {
  id           Int    @id @default(autoincrement())
  company_name String
  tag_line     String
  address      String
  phone        String
  email        String
  website      String
  footer       String
}

model attendance {
  id            Int       @id @default(autoincrement())
  userId        Int
  inTime        DateTime
  outTime       DateTime?
  ip            String?
  comment       String?
  punchBy       Int?
  totalHour     Float?
  inTimeStatus  String?
  outTimeStatus String?
  status        Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime
  user          user      @relation(fields: [userId], references: [id])
}

model award {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  description  String?
  image        String?
  status       Boolean        @default(true)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  awardHistory awardHistory[]
}

model awardHistory {
  id          Int      @id @default(autoincrement())
  userId      Int
  awardId     Int
  awardedDate DateTime
  comment     String?
  status      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  award       award    @relation(fields: [awardId], references: [id])
  user        user     @relation(fields: [userId], references: [id])
}

model customer {
  id              String    @id
  customId        String    @unique
  institution     String
  name            String
  phone           String    @unique
  ville           String
  quarter         String
  region          String?
  nameresponsable String?   @default("")
  email           String?   @default("")
  website         String?   @default("")
  status          Boolean?  @default(true)
  type_customer   typCat
  created_at      DateTime  @default(now())
  updated_at      DateTime? @updatedAt
}

model CustomerCounter {
  id          Int    @id @default(autoincrement())
  institution String
  month       Int
  year        Int
  count       Int    @default(0)

  @@unique([institution, month, year])
}

model department {
  id     Int     @id @default(autoincrement())
  name   String
  status Boolean @default(true)
  user   user[]
}

model designation {
  id                 Int                  @id @default(autoincrement())
  name               String               @unique
  status             Boolean              @default(true)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime
  designationHistory designationHistory[]
}

model designationHistory {
  id            Int         @id @default(autoincrement())
  userId        Int
  designationId Int
  startDate     DateTime
  endDate       DateTime?
  comment       String?
  designation   designation @relation(fields: [designationId], references: [id])
  user          user        @relation(fields: [userId], references: [id])
}

/// model permission {
///   id             Int              @id @default(autoincrement())
///   name           String           @unique
///   createdAt      DateTime         @default(now())
///   updatedAt      DateTime
///   rolePermission rolePermission[]
/// }
model institution {
  id       String    @id @default(uuid())
  name     String
  slug     String    @unique
  products product[]
}

model product {
  id                  String      @id @default(uuid())
  EANCode             String      @unique
  brand               String
  designation         String
  quantity            Int
  restockingThreshold Int
  sellingPriceTTC     Float
  purchase_price      Float
  warehouse           String
  created_at          DateTime    @default(now())
  updated_at          DateTime    @default(now())
  imageName           String?
  idSupplier          Int?
  product_category_id Int?
  unit_measurement    Float?
  unit_type           String?
  sku                 String?     @unique
  reorder_quantity    Int?
  institutionId       String
  institution         institution @relation(fields: [institutionId], references: [id])
}

model ProductCounter {
  id          Int    @id @default(autoincrement())
  institution String
  month       Int
  year        Int
  count       Int    @default(0)

  @@unique([institution, month, year])
}

model user {
  id                 Int                  @id @default(autoincrement())
  firstName          String?
  lastName           String?
  userName           String               @unique
  password           String
  email              String?              @unique
  phone              String?              @unique
  street             String?
  city               String?
  state              String?
  zipCode            String?
  country            String?
  joinDate           DateTime?
  leaveDate          DateTime?
  employeeId         String?              @unique
  bloodGroup         String?
  image              String?
  employmentStatusId Int?
  departmentId       Int?
  roleId             Int?
  shiftId            Int?
  leavePolicyId      Int?
  weeklyHolidayId    Int?
  status             Boolean              @default(true)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime
  AuditLog           AuditLog[]
  attendance         attendance[]
  awardHistory       awardHistory[]
  designationHistory designationHistory[]
  department         department?          @relation(fields: [departmentId], references: [id])
  weeklyHoliday      weeklyHoliday?       @relation(fields: [weeklyHolidayId], references: [id])
}

model weeklyHoliday {
  id        Int      @id @default(autoincrement())
  name      String
  startDay  String
  endDay    String
  status    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime
  user      user[]
}

enum typCat {
  Pharmacie
  Distributeur
}
